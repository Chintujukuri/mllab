Round Robin without Arrival Time
#include <stdio.h>
struct process {
int pid;
int bt;
int at;
int wt;
int tat;
int ct;
int st;
int rt;
};
struct process p[100];
int c=0;
int t=0;
int n;
int q;
float swt = 0.0;
float stat = 0.0;
float awt = 0.0;
float atat = 0.0;
void main() {
printf("\n Enter the No. of Processes: ");
scanf("%d", &n);
printf("\n Enter the BT of all the processes:" );
for(int i=0; i<n; i++) {
scanf("%d", &p[i].bt);
p[i].rt = p[i].bt;
p[i].pid = i+1;
}
printf("\n Enter the time quantum q: ");
scanf("%d", &q);
for(int i=0; i<n; i++) {
p[i].st = 0;
p[i].ct = 0;
p[i].wt = 0;
}
while(1) {
c=0;
for(int i=0; i<n; i++) {
if(p[i].rt != 0) {
c=1;
p[i].st = t;
p[i].wt = p[i].wt + p[i].st - p[i].ct;
if(p[i].rt <= q) {
t = t + p[i].rt;
p[i].rt = 0;
p[i].ct = t;
}
else{
p[i].rt =p[i].rt - q;
t = t+q;
p[i].ct = t;
}
}
}
if(c==0)
break;
}
for(int i=0; i<n; i++) {
swt = swt + p[i].wt;
stat = stat + p[i].ct;
}
awt = swt/n;
atat = stat/n;
printf("swt=%lf, awt = %lf\n", swt, awt);
printf("stat=%lf, atat=%lf\n", stat, atat);
}

#####################################################################################################################################
Round robin with Arrival Time
#include <stdio.h>
struct process {
    int pid;
    int bt;
    int at;
    int wt;
    int tat;
    int ct;
    int st;
    int rt;
};
struct process p[100];
int n, q;
float swt = 0, stat = 0, awt = 0, atat = 0;
int main() {
    printf("\nEnter the No. of Processes: ");
    scanf("%d", &n);
    printf("\nEnter the burst time and arrival time of all the processes:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d %d", &p[i].bt, &p[i].at);
        p[i].rt = p[i].bt;
        p[i].pid = i + 1;
    }
    printf("\nEnter the time quantum (q): ");
    scanf("%d", &q);

    // Sort processes based on arrival time
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (p[i].at > p[j].at) {
                // Swap processes
                struct process temp = p[i];
                p[i] = p[j];
                p[j] = temp;
            }
        }
    }

    int T = 0;
    int completed = 0;

    while (completed < n) {
        int remaining = 0; // Flag to check if at least one process is remaining

        for (int i = 0; i < n; i++) {
            if (p[i].rt > 0 && p[i].at <= T) {
                remaining = 1; // There's at least one process remaining
                if (p[i].rt <= q) {
                    T += p[i].rt;
                    p[i].rt = 0;
                    p[i].ct = T;
                    completed++;
                } else {
                    T += q;
                    p[i].rt -= q;
                }
            }
        }

        if (!remaining) {
            // If no process is ready, increment time
            T++;
        }
    }

    for (int i = 0; i < n; i++) {
        p[i].tat = p[i].ct - p[i].at;
        p[i].wt = p[i].tat - p[i].bt; 
        swt += p[i].wt;
        stat += p[i].tat;
    }

    awt = swt / n;
    atat = stat / n;

    printf("\nProcess\tBurst Time\tArrival Time\tWaiting Time\tTurnaround Time");
    for (int i = 0; i < n; i++) {
        printf("\n%d\t%d\t%d\t%d\t%d", p[i].pid, p[i].bt, p[i].at, p[i].wt, p[i].tat);
    }

    printf("\nAvg Waiting Time = %f", awt);
    printf("\nAvg Turnaround Time = %f\n", atat);

    return 0;
}
